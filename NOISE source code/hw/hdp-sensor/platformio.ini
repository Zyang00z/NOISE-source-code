; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[common]
lib_deps =

[env:mini]
platform = espressif8266
framework = arduino
board = d1_mini
build_flags =
  -D ESP8266
  -D LED=5
  -D CS_SENSE=14
  -D CS_RES=12
  -D STATUS_LED=LED_BUILTIN
lib_deps =
  ${common.lib_deps}

[env:uno]
platform = atmelavr
board = uno
framework = arduino
lib_deps =
  ${common.lib_deps}

; for larger PCB version
[env:pcb]
platform = atmelavr
board = nanoatmega328
framework = arduino
build_flags =
  -D HEARTBEAT
  -D HEADPHONE_A
  -D SERIAL_BAUD=38400
  -D LED=2
  -D CS_SENSE=7
  -D CS_RES=3
  -D STATUS_LED=LED_BUILTIN
  -D DEBUG_OUTPUT_PIN=A5
  -D FLEX=A0
lib_deps =
  ${common.lib_deps}

; for smaller PCB version
[env:pcb3]
platform = atmelavr
board = pro16MHzatmega168
framework = arduino
build_flags =
  -D HEARTBEAT
  -D HEADPHONE_B
  -D SERIAL_BAUD=38400
  -D LED=3
  -D CS_SENSE=9
  -D CS_RES=8
  -D STATUS_LED=LED_BUILTIN
  -D DEBUG_OUTPUT_PIN=2
  -D FLEX=A0
; for testing
;  -D TEST_TOUCH_SENSE
lib_deps =
  ${common.lib_deps}

; for smaller PCB version (first version)
[pcb2]
build_flags =
  -D CLOCK_SOURCE=6
  -D HEADPHONE_B
  -D HEARTBEAT
  -D SOFTWARE_SERIAL
  -D SERIAL_BAUD=9600
  -D LED=1
  -D STATUS_LED=1
  -D CS_SENSE=2
  -D CS_RES=3
  -D TX=0
  -D FLEX=A2
;  -D TEST_COMMAND_SEND
;  -D SERIAL_TEST
;  -D PRINT_OSCCAL
;  -D OSCCAL_VALUE=0x66
;  -D TEST_TOUCH_SENSE
;  -D TEST_SEND_HOOK_EVENT

[env:pcb2]
platform = atmelavr
board = attiny85
framework = arduino
board_build.f_cpu = 16000000L
upload_protocol = arduino
upload_flags =
  -P$UPLOAD_PORT
  -b$UPLOAD_SPEED
upload_speed = 38400
build_flags =
  ${pcb2.build_flags}
lib_deps =
  ${common.lib_deps}

; for smaller PCB version, using USBASP programmer (no serial bootloader)
; also used to flash bootloader
[env:pcb2_usbasp]
platform = atmelavr
board = attiny85
framework = arduino
build_flags =
  ${pcb2.build_flags}
lib_deps =
  paulstoffregen/CapacitiveSensor
upload_protocol = custom
upload_port = usb
upload_flags =
    -C
    ; use "tool-avrdude-megaavr" for the atmelmegaavr platform
    ${platformio.packages_dir}/tool-avrdude/avrdude.conf
    -p
    $BOARD_MCU
    -P
    $UPLOAD_PORT
    -c
    usbasp
upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i
;board_build.f_cpu = 8000000L
;board_fuses.lfuse = 0xC2
;board_fuses.lfuse = 0x82 // CLKOUT
board_build.f_cpu = 16000000L
;CLKOUT PLL
;board_fuses.lfuse = 0x81
;PLL
board_fuses.lfuse = 0xC1
board_fuses.hfuse = 0xDF
board_fuses.efuse = 0xFE
; nix-shell -p gnumake pkgs.pkgsCross.avr.buildPackages.gcc --run "make attiny85 SOFT_UART=1 AVR_FREQ=16000000  L TXPIN=4 RXPIN=2 SOFT_UART=1"
board_bootloader.file = optiboot_attiny85.hex
board_bootloader.lfuse = 0xC1
board_bootloader.hfuse = 0xDF
board_bootloader.efuse = 0xFE
board_bootloader.lock_bits = 0xFF
board_bootloader.unlock_bits = 0xFF
